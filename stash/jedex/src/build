#! /bin/sh
#
#   Examples build helper
#   Syntax: build all | clean
#
#   This controls whether we get debug or release builds
test -z "$BOOM_MODEL" && BOOM_MODEL=debug

if [ /$1/ = /all/ ]; then
    echo "Building C examples..."
    for MAIN in `egrep -l "main \(" *.c`; do
        echo "$MAIN"
        ./c -l -q -li ../.. -li ../include -ll /usr/local/lib -g $MAIN
    done
elif [ /$1/ = /clean/ ]; then
    echo "Cleaning C examples directory..."
    rm -f *.o *.lst core
    for MAIN in `egrep -l "main \(" *.c`; do
        rm -f `basename $MAIN .c`
    done
elif [ -f $1.c ]; then
    echo "$1"
    ./c -l -q -li ../.. -li ../include -ll /usr/local/lib -g $1
elif [ /$1/ = /link/ ]; then
  echo "Linking the jedex library..."
    ./c -li ../.. -li ../include -ll /usr/local/lib -g \
    allocation.c \
    generic.c \
    generic_array.c \
    generic_boolean.c \
    generic_bytes.c \
    generic_double.c \
    generic_float.c \
    generic_int.c \
    generic_link.c \
    generic_long.c \
    generic_map.c \
    generic_null.c \
    generic_record.c \
    generic_string.c \
    generic_union.c \
    jedex_schema.c \
    memoize.c \
    raw_array.c \
    raw_map.c \
    raw_schema.c \
    st.c \
    value_json.c \
    wrapped_buffer.c
    ./c -li ../.. -li ../include -ll /usr/local/lib -g -r libjedex \
    allocation.c \
    generic.c \
    generic_array.c \
    generic_boolean.c \
    generic_bytes.c \
    generic_double.c \
    generic_float.c \
    generic_int.c \
    generic_link.c \
    generic_long.c \
    generic_map.c \
    generic_null.c \
    generic_record.c \
    generic_string.c \
    generic_union.c \
    jedex_schema.c \
    memoize.c \
    raw_array.c \
    raw_map.c \
    raw_schema.c \
    st.c \
    value_json.c \
    wrapped_buffer.c
else
    echo "syntax: build all | clean"
fi
